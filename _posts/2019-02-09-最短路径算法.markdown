## 单源最短路径(Dijkstra)
给一个带权有向图G＝(V, E)和源点v∈V，求从v到G中其余各顶点的最短路径。我们知道，一个点到另一个点的最短距离，就是两种情况，一种就是点A到点B，还有一种就是A->C->B（可能通过多个节点），Dijkstra的思想就是遍历所有节点，和这个节点相邻的节点，都计算一个通过本节点之后路径会不会短一点，比如已经知道A->B的距离是10，遍历到节点C的时候发现A->C->B的距离是5，这样就是更新A->B的距离为5，因此Dijkstra的流程如下：
1. 申请一个数组dist[n]，n为节点的个数，节点名称分别为v1,v2...,vn，如果源节点到节点vi有直接到达的路径，那么dist[i]=E[0][i]，否则dist[i]为无穷大
2. 遍历所有节点，如果经过该节点后从源节点到节点j的距离dist[j]要比现在的dist[j]要小，那么就更新dist[j]
3. 所有节点遍历完，结束
```
void Dijkstra(std::vector<std::vector<int>>& matrix)
{
	int size = matrix.size();
	std::vector<int> visited(size, 0);
	std::vector<int> dist(size, 0);
	//最短距离
    int min_cost;
    //权值最小的那个顶点的下标
    int min_cost_index;
    //主循环
    for (int i = 1; i < size; i++) {
        min_cost = INT_MAX;
        for (int j = 0; j < size; j++) {
            //注意要确保这个点没有找过。
            if (visited[j]==false && dist[j] < min_cost){
                min_cost_index = j;
                min_cost = dist[j];
            }
        }
        //找到某一个点的最短距离
        visited[min_cost_index] = true;
        //利用该点进行dist的更新，并且调整前驱。
        for (int j = 0; j < size; j++){
            //确保有连接
            if (visited[j] == false && matrix[min_cost_index][j] != INT_MAX && min_cost+ matrix[min_cost_index][j] < dist[j])
            {
                dist[j] = min_cost + matrix[min_cost_index][j];
            }
        }
    }
}
```

## Floyd算法
Floyd是一个求多源最短路径的动态规划算法，思想和Dijkstra非常相似，唯一的不同点就是有多个源节点，准确说是将所有节点都使用dijkstra，最后求得任何两个节点之间的最短距离，代码如下：
```
void Floyd(std::vector<std::vector<int>>& matrix, std::vector<std::vector<int>>& dist) {
	int size = matrix.size();
	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size; j++) {
			dist[i][j] = matrix[i][j];
		}
	}
	for (int k = 0; k < size; k++) {
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				if (dist[i][k] + dist[k][j] < dist[i][j]) {
					dist[i][j] = dist[i][k] + dist[k][j];
				}
			}
		}
	}
}
```

## 总结
最短路径算法都是使用贪心和动态规划的策略来解决的，首先说一下贪心算法，首先我们要知道，贪心算法并不一定是全局最优的，因为贪心算法每次都是选择局部最优，但是在很多情况下却能得到最终全局最优解，那么什么时候我们能使用全局最优呢？当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。问题的最优子结构性质是该问题可用动态规划算法或贪心算法求解的关键特征。