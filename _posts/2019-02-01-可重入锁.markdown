#可重入锁

##基本概念
允许同一个线程多次对锁进行acquire的操作（不可重入的锁如果lock住了再unlock前就不能再lock），为什么需要可重入锁呢，其实主要是在开发过程中，往往模块和模块之间，函数和函数之间很难做到上锁的一致，比如f(x)调用了g(x)，在f(x)对某个mutex上了锁，就不能在g(x)中上锁了。为了保证局部的线程安全以及不会导致全局的死锁，便有了可重入锁的概念。

##实现原理
原理其实很简单，就是在上锁的时候判断是不是同一个线程操作的，如果不是就一直wait，如果是，就计数加1，释放锁的时候计数-1，最后一层释放的时候，可重入锁的计数变为0

##实例代码
```
class RetrantLock {
public:
	RetrantLock()
		:m_owner(NULL)
		,m_refCount(0) {
		pthread_mutex_init(&m_lock, NULL);
	}

	void lock() {
		pthread_t cur_thread = pthread_self();
		if (m_owner == cur_thread) {
			++m_refCount;
		} else {
			pthread_mutex_lock(&m_lock);
			m_owner = cur_thread;
			m_refCount = 1;
		}
	}

	void unlock() {
		pthread_t cur_thread = pthread_self();
		if (m_owner != cur_thread) {
			return;
		} else {
			if (--m_refCount == 0) {
				m_owner = NULL;
				pthread_mutex_unlock(&m_lock);
			}
		}
	}
	
private:
	pthread_mutex_t m_lock; // 不可重入
	pthread_t m_owner;
	uint64_t m_refCount;
}
```